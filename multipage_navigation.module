<?php

/**
 * @file
 * Multipage Navigation.
 */

/**
 * Implements hook_block_info().
 */
function multipage_navigation_block_info() {
  $blocks['multipage_navigation_1'] = array(
    'info' => t('Multipage Navigation 1'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['multipage_navigation_2'] = array(
    'info' => t('Multipage Navigation 2'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_wysiwyg_smart_paging_seo_form_alter().
 */
function multipage_navigation_wysiwyg_smart_paging_seo_form_alter(&$form) {
  $form['navigation_title'] = array(
    '#type' => 'textfield',
    '#name' => 'navigation_title',
    '#title' => 'Navigation Block Title',
    '#size' => 100,
    '#weight' => 99,
    '#description' => t('The title that will appear on the Navigation Block for multi-paged content.'),
  );
}

/**
 * Implements hook_block_view().
 */
function multipage_navigation_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'multipage_navigation_1':
    case 'multipage_navigation_2':
      if ($node = menu_get_object('node')) {
        $pagination = _multipage_navigation_get_pagination($node);
        if (count($pagination->links) > 1) {
          $block['title'] = '';
          $block['content']['#markup'] = theme('multipage_navigation', array(
              'title' => $pagination->default_title,
              'links' => $pagination->links,
              'page_of_total' => t('Page @current of @total', array(
                  '@current' => _multipage_navigation_get_current_page(1) + 1,
                  '@total' => count($pagination->links),
                )
              ),
            )
          );

          // Attach JS and CSS to block.
          $block['content']['#attached'] = array(
            'css' => array(drupal_get_path('module', 'multipage_navigation') . '/multipage_navigation.css'),
            'js' => array(drupal_get_path('module', 'multipage_navigation') . '/multipage_navigation.js'),
          );
        }
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function multipage_navigation_theme($existing, $type, $theme, $path) {
  return array(
    'multipage_navigation' => array(
      'template' => 'templates/block--multipage-navigation',
      'variables' => array(
        'title' => NULL,
        'links' => NULL,
        'page_of_total' => NULL,
      ),
    ),
  );
}

/**
 * Helper to extract Smart Paging data from multi-page content.
 */
function _multipage_navigation_get_pagination($node) {
  static $pagination;
  if (count($pagination) > 0) {
    return $pagination;
  }

  // Get content from the node.
  $body = field_get_items('node', $node, 'body'); // @TODO should work with any field that uses smart_paging.
  $content = $body[0]['value'];

  // Find all smartpagingurl tags.
  $fragment_urls = array();
  preg_match_all('<!--smartpagingurl "(.*)"-->', $content, $matched_tags);  // @TODO improve regex.
  if (!empty($matched_tags[1])) {
    $fragment_urls = array_merge(array(''), $matched_tags[1]);
  }

  // Find all smartpagingmeta tags.
  $metatags = array();
  preg_match_all('<!--smartpagingmeta ({.*?})-->', $content, $matched_tags); // @TODO improve regex.
  if (!empty($matched_tags[1])) {
    $metatags = $matched_tags[1];
  }

  // Use the node title for the first item of the navigation.
  $metatags = array_merge(array(json_encode(array('navigation_title' => $node->title))), $metatags);

  // Create pagination.
  $pagination = new stdClass();
  $pagination->links = array();

  foreach ($metatags as $page => $metatag) {
    // Extract the Navigation title.
    $navigation_title - '';
    if ($json_values = json_decode($metatag)) {
      $navigation_title = $json_values->navigation_title;
    }
    if (empty($navigation_title)) {
      // Use the node title in case a page has empty value.
      $navigation_title = $node->title;
    }

    $options = array();
    $options['query']['page'] = '0,' . $page; // @TODO use the correct element.

    // Add fragment Url.
    if (!empty($fragment_urls[$page])) {
      $options['fragment'] = $fragment_urls[$page];
    }

    $current_page = _multipage_navigation_get_current_page(1); // @TODO find the correct value of $element.
    if ($current_page === $page) {
      $options['attributes']['class'][$page] = 'active-page';
      // Store the value to be displayed as the block title.
      $pagination->default_title = $navigation_title;
    }
    $pagination->links[] = l($page + 1 . '. ' . $navigation_title, _multipage_navigation_get_current_url(), $options);
  }
  return $pagination;
}

/**
 * Helper that returns the current Url.
 */
function _multipage_navigation_get_current_url() {
  $current_url = function_exists("path_alias_xt_get_path_alias") ? path_alias_xt_get_path_alias($_GET['q']) : drupal_get_path_alias($_GET['q']);
  $current_url = preg_replace('#(^/)|(/$)#', '', $current_url);
  $clean_url   = variable_get('clean_url', 0);
  $current_url = $clean_url ? $current_url : "?q=$current_url";
  return $current_url;
}

/**
 * Helper that returns the current page.
 */
function _multipage_navigation_get_current_page($element = 0) {
  global $pager_page_array;
  $page  = !empty($pager_page_array[$element]) ? (int) $pager_page_array[$element] : 0;
  return $page;
}
